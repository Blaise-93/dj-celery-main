from django.db import models
from django.utils import timezone
import uuid
from utils import generate_code
from django.urls import reverse


class Position(models.Model):
    """ is the product * quantity """

    product = models.ForeignKey("products.Product", on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField()
    # we will overide the price later
    price = models.FloatField(blank=True, null=True)
    date_created = models.DateTimeField(blank=True)

    def save(self, *args, **kwargs):
        # self.price => the price instance of the Position, which is overriden here
        self.price = self.product.price * self.quantity
        return super().save(*args, **kwargs)

    def __str__(self) -> str:
        return f'id: {self.pk}, product: {self.product.name}'

    def get_sales_id(self):
        """ reverse relationship mapping of the position vs sales instance"""
        sale_obj = self.sales_set.first()
        return sale_obj.id


class Sales(models.Model):
    """ can have many positions - eg 3 products in different quantity """
    class Meta:
        verbose_name_plural = 'Sales'

    transaction_id = models.CharField(
        max_length=15, blank=True,
        help_text="leave it blank, the code will be autogenerated")

    # list of positions that we are including in the Sales table
    positions = models.ManyToManyField("Position")
    total_price = models.FloatField(blank=True, null=True)
    customer = models.ForeignKey(
        "customers.Customer", on_delete=models.CASCADE)
    # who sold to the customer with amount of the position to the total price
    salesman = models.ForeignKey("profiles.Profile", on_delete=models.CASCADE)
    date_created = models.DateTimeField(blank=True)
    date_updated = models.DateTimeField(auto_now=True)

    def __str__(self) -> str:
        return f'Sales for the amount of ${self.total_price}'

    def save(self, *args, **kwargs):
        if self.date_created is None:
            self.date_created = timezone.now()

        if self.transaction_id == "":
            self.transaction_id = uuid.uuid4().hex.lower()[:12]
        return super().save(*args, **kwargs)

    def get_positions(self):  # get_positions
        return self.positions.all()

    def get_absolute_url(self):
        return reverse("sales:sales-detail", kwargs={"pk": self.pk})


class CSV(models.Model):
    file_name = models.FileField(upload_to='csvs')
    is_activated = models.BooleanField(default=False)
    date_created = models.DateTimeField(auto_now_add=True)
    date_updated = models.DateTimeField(auto_now=True)

    def __str__(self) -> str:
        return self.file_name
